################################################################################
### Custom app-specific settings                                             ###
################################################################################
# Credentials of role "ADMIN" for HTTP Basic Authentication.
app.spring-boot-admin.role.admin.name=admin
app.spring-boot-admin.role.admin.password=admin
# Credentials of role "USER" for HTTP Basic Authentication.
app.spring-boot-admin.role.user.name=demouser
app.spring-boot-admin.role.user.password=demopass

################################################################################
### Spring settings                                                          ###
################################################################################
spring.application.name=java-docker-build-tutorial
server.port=8123

# Enable virtual threads (requires Java 21+).
# Virtual threads may come with downsides for your Spring Boot application,
# see read the documentation before you enable them here.
# https://docs.spring.io/spring-boot/reference/features/spring-application.html#features.spring-application.virtual-threads
#spring.threads.virtual.enabled=true

# Spring Actuator configuration
# https://docs.spring.io/spring-boot/reference/actuator/endpoints.html
#
# Expose all endpoints by default via `*`.  However, `AppSecurityConfiguration`
# only permits public access to a subset of endpoints, whereas the rest requires
# HTTP Basic Authentication.
#
# IMPORTANT: In production, you should choose carefully what endpoints to expose!
management.endpoints.web.exposure.include=*
# Enable the env contributor.
management.info.env.enabled=true

################################################################################
# Spring Boot Admin                                                            #
################################################################################
### Spring Boot Admin: server settings
spring.boot.admin.context-path=admin
spring.boot.admin.ui.title=Spring Boot Admin (user: ${app.spring-boot-admin.role.admin.name}, password: ${app.spring-boot-admin.role.admin.password})
spring.boot.admin.instance-auth.enabled=true
# Default username to use if SBA Client actuator endpoints are protected with
# HTTP Basic authentication.
#
# Used as fallback when the server attempts to collect metrics from a secured
# client in the case that the client, upon its own registration with the server,
# did not provide a particular username and password for the server to use.
# Clients can pass such metadata to servers so that a server can "personalize"
# its communication with a client. Here, the client would do this by setting
# `spring.boot.admin.client.instance.metadata.user.name` and
# `spring.boot.admin.client.instance.metadata.user.password` in its
# `application.properties`.
#spring.boot.admin.instance-auth.default-user-name=${app.spring-boot-admin.role.user.name}
# Same as `spring.boot.admin.instance-auth.default-user-name`, but for the
# password.
#spring.boot.admin.instance-auth.default-password=${app.spring-boot-admin.role.user.password}

### Spring Boot Admin: client settings
spring.boot.admin.client.enabled=true
# The URL of the Spring Boot Admin server that the client uses to register
# itself.
spring.boot.admin.client.url=http://localhost:${server.port}/admin
# Username if SBA server API is protected with HTTP Basic Authentication.
# Used when the client registers itself with a secured SBA server.
spring.boot.admin.client.username=${app.spring-boot-admin.role.user.name}
# Password if SBA server API is protected with HTTP Basic Authentication.
# Used when the client registers itself with a secured SBA server.
spring.boot.admin.client.password=${app.spring-boot-admin.role.user.password}
# The URL of the Spring Boot Admin client that is used by the server to collect
# metrics.
spring.boot.admin.client.instance.service-base-url=http://localhost:${server.port}/
# Part of the metadata passed from the SBA client to the SBA server. Here, the
# SBA client tells the SBA server: "When you (server) are connecting to my
# (client) actuator endpoints (like `/actuator/health`) to fetch metrics etc.,
# use the following username in case the actuator endpoints are protected by
# HTTP Basic authentication."
spring.boot.admin.client.instance.metadata.user.name=${app.spring-boot-admin.role.user.name}
# Same as `spring.boot.admin.client.instance.metadata.user.name`, but for the
# password.
spring.boot.admin.client.instance.metadata.user.password=${app.spring-boot-admin.role.user.password}
